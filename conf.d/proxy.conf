

# RATE LIMITING
# Rate Limiting Zone for DDOS Prevention 
limit_req_zone $binary_remote_addr zone=req_zone:10m rate=10r/s;
# Limit connections
limit_conn_zone $binary_remote_addr zone=addr:10m;


# CACHING
# Setup the proxy cache
### Levels options sets directory depth, and characters of md5 hash used at that level
### Inactive sets the time a cached item is cleared after last access
proxy_cache_path /var/cache/nginx levels=2:2:2 keys_zone=my-cache:10m max_size=2g inactive=60m use_temp_path=off;
proxy_cache my-cache;
proxy_cache_revalidate on;
proxy_ignore_headers "Cache-Control" "Expires";
# Cache pages that return status 200 for 60 minutes
proxy_cache_valid 200 60m;

# Set proxy_cache_key to override default 'proxy_cache_key $scheme$proxy_host$uri$is_args$args;'
# as we don't care about the "scheme" (http or https are the same, just SSL is different)
proxy_cache_key $proxy_host$uri$is_args$args;

# This should serve the cache files if upstream is down
# - Note: 'updating' required with proxy_cache_background_update
proxy_cache_use_stale updating error timeout invalid_header http_500 http_502 http_503 http_504;

# Updated expired item in the background 
proxy_cache_background_update on;


# Map value based on "request_method" into "purge_method"
# Specifically set purge_method variable to 1 or 0 if the request method equals 'PURGE'
map $request_method $purge_method {
    PURGE 1;
    default 0;
}

## Not working
proxy_cache_purge $purge_method;

proxy_hide_header X-Powered-By;
