# Location level config

# LIMITING
# Connection limiting
limit_conn addr 10;
# Request/Rate Limiting
limit_req zone=req_zone burst=20;
# 429 Too Many Requests
limit_req_status 429; 
limit_req_log_level warn;

# PROXY CACHING
add_header X-Cache-Status $upstream_cache_status;

# Debugging header
#add_header X-Cached-Debug-Default-Location 'Loaded default_location 17';

# Enable buffering (nginx-proxy disables by default)
proxy_buffering on;

proxy_cache my-cache;
proxy_cache_revalidate on;
proxy_ignore_headers "Cache-Control" "Expires";

# This should serve the cache files if upstream is down
# - Note: 'updating' required with proxy_cache_background_update
proxy_cache_use_stale updating error timeout invalid_header http_500 http_502 http_503 http_504;

# Updated expired item in the background 
proxy_cache_background_update on;

# Cache pages that return status 200 for 60 minutes
proxy_cache_valid 200 60m;

# Purge method
proxy_cache_purge $purge_method;

set $proxy_cache_bypass "";
set $proxy_no_cache "";

set $skip_reason "";

if ($cookie_nocache) {
    set $proxy_no_cache 1;
    set $skip_reason "${skip_reason}NoCacheCookie "; 
}
if ($arg_nocache) {
    set $proxy_no_cache 1;
    set $skip_reason "${skip_reason}ArgNoCache "; 
}
if ($arg_comment) {
    set $proxy_no_cache 1;
    set $skip_reason "${skip_reason}ArgComment "; 
}

if ($http_authorization) {
    set $proxy_no_cache 1;
    set $proxy_cache_bypass 1;
    set $skip_reason "${skip_reason}HttpAuthorization "; 
}
if ($http_set_cookie) {
    set $proxy_no_cache 1;
    set $proxy_cache_bypass 1;
    set $skip_reason "${skip_reason}HttpSetCookie "; 
}

if ($request_method !~* "GET|HEAD") {
    set $proxy_no_cache 1;
    set $proxy_cache_bypass 1;
    set $skip_reason "${skip_reason}METHOD "; 
}

# Don't cache URIs containing the following segments
#if ($request_uri ~* "/wp-admin/|wp-.*.php") {
#    set $proxy_no_cache 1;
#    set $proxy_cache_bypass 1;
#    set $skip_reason "${skip_reason}WPURI "; 
#}

# Use custom header 'X-Disable-Cache' to allow upstream to instruct the downstream caching server not to cache
# the current request.
# Some caching impls will use http pragma or cache-control, however these are intended for
# client side caching, not server side.
if ($upstream_http_x_disable_cache) {
    set $proxy_no_cache 1;
    set $proxy_cache_bypass 1;
    set $skip_reason "${skip_reason}HttpDisableCache "; 
    # Remove header since not intended for client/browser
    add_header X-Disable-Cache "";
}

# Not sure letting client decide if cache should be used (other than in development) is appropriate
# this could subject the server to more load than would be anticipated by bad agents accessing with
# the header set
#if ($http_pragma) {
#    set $proxy_cache_bypass 1;
#    set $skip_reason "${skip_reason}HttpPragma(${http_pragma}) "; 
#}
#if ($http_cache_control ~* "/no-cache/") {
#    set $proxy_cache_bypass 1;
#    set $skip_reason "${skip_reason}HttpCacheControl(${http_cache_control}) "; 
#}

# Add header for debugging
add_header X-No-Chache-Reason $skip_reason;

# Disable cache when defined options are set
proxy_cache_bypass $proxy_cache_bypass;
add_header X-Bypass $proxy_cache_bypass;

# Don't save to cache
proxy_no_cache     $proxy_no_cache;
add_header X-No-Cache $proxy_no_cache;
