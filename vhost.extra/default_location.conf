# Location level config

# Enable Gzip compression.
gzip on;
# Disable Gzip on IE6.
gzip_disable "msie6";
# Avoids clients that don't support Gzip.
gzip_vary on;
# Compress data, even when the client connects through a proxy.
gzip_proxied any;
gzip_comp_level 2;
gzip_http_version 1.1;

# LIMITING
# Connection limiting
limit_conn addr 10;
# Request/Rate Limiting
limit_req zone=req_zone burst=20;
# 429 Too Many Requests
limit_req_status 429; 
limit_req_log_level warn;

# PROXY CACHING
add_header X-Cache-Status $upstream_cache_status;

# Debugging header
#add_header X-CP-Flag 1;

# Enable buffering (nginx-proxy defines as disabled by default) - required for proxy caching
proxy_buffering on;

set $proxy_cache_bypass "";
set $proxy_no_cache "";
set $skip_reason "";

# Note: IF directives are evaluated early, so can't be used with upstream_http_* (and other similar values)
# map directive could be potentially used instead.
if ($cookie_nocache) {
    set $proxy_no_cache 1;
    set $skip_reason "${skip_reason}NoCacheCookie "; 
}

# Don't cache requests providing authorisation header
if ($http_authorization) {
    set $proxy_no_cache 1;
    set $proxy_cache_bypass 1;
    set $skip_reason "${skip_reason}HttpAuthorization "; 
}
# Don't cache requests that are setting cookies
if ($http_set_cookie) {
    set $proxy_no_cache 1;
    set $proxy_cache_bypass 1;
    set $skip_reason "${skip_reason}HttpSetCookie "; 
}

if ($request_method !~* "GET|HEAD") {
    set $proxy_no_cache 1;
    set $proxy_cache_bypass 1;
    set $skip_reason "${skip_reason}METHOD "; 
}

# APPLICATION SPECIFIC EXCLUSIONS
## Don't cache if WordPress cookie is provided
if ($http_cookie ~* "comment_author_|wordpress_(?!test_cookie)|wp-postpass_" ) {

    set $proxy_no_cache 1;
    set $proxy_cache_bypass 1;
    set $skip_reason "${skip_reason}HttpCookie(WordPress) "; 
}
## Don't cache if Gitlab session cookie is provided
if ($http_cookie ~* "_gitlab_session" ) {

    set $proxy_no_cache 1;
    set $proxy_cache_bypass 1;
    set $skip_reason "${skip_reason}HttpCookie(GitLab) "; 
}
## Don't cache if Java session cookie is provided
if ($http_cookie ~* "JSESSIONID=" ) {
    set $proxy_no_cache 1;
    set $proxy_cache_bypass 1;
    set $skip_reason "${skip_reason}HttpCookie(JSESSIONID) "; 
}



# Not sure letting client decide if cache should be used (other than in development) is appropriate
# this could subject the server to more load than would be anticipated by bad agents accessing with
# the header set
#if ($http_pragma) {
#    set $proxy_no_cache 1;
#    set $proxy_cache_bypass 1;
#    set $skip_reason "${skip_reason}HttpPragma(${http_pragma}) "; 
#}
#if ($http_cache_control ~* ".*no\-cache.*") {
#    set $proxy_no_cache 1;
#    set $proxy_cache_bypass 1;
#    set $skip_reason "${skip_reason}HttpCacheControl(${http_cache_control}) "; 
#}


# Below, upstream has to be appended, as certain directives are evaluated before the upstream properties are set
# Namely the "set" and "proxy_cache_bypass" directives. This can lead to the cache reason being blank 
# but cache status being MISS   

# Add header for debugging
add_header X-No-Chache-Reason "${skip_reason}${upstream_http_no_cache}";
# Disable cache when defined options are set
proxy_cache_bypass "${skip_reason}${upstream_http_no_cache}";
# Don't save to cache
proxy_no_cache "${skip_reason}${upstream_http_no_cache}";

